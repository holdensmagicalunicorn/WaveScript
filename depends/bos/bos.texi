\input texinfo                          @comment -*- TeXinfo -*-
@setfilename bos.info
@settitle Bryan's Object System---User's Manual
@iftex
@finalout
@afourpaper
@end iftex
@c @setchapternewpage odd               % For book-style double sided manual
@c      @smallbook
@tex
\overfullrule=0pt
%\global\baselineskip 30pt              % For printing in double spaces
@end tex
@syncodeindex vr fn
@syncodeindex cp fn
@ifinfo
This file documents Bryan's Object System for the Scheme programming
language.

Copyright (C) 1994 Bryan O'Sullivan

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
@end ifinfo
@c
@titlepage
@sp 6
@center @titlefont{Bryan's Object System---User's Manual}
@sp 4
@center June 1994
@sp 5
@center Bryan O'Sullivan
@center @t{bosullvn@@maths.tcd.ie}
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1994 Bryan O'Sullivan

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@end titlepage
@page
@ifinfo
@node Top, License, (dir), (dir)

This manual documents Bryan's Object System (@sc{bos}), a set of Scheme
code and macros which run as a subsystem under most modern Scheme
systems.  The manual is divided into the following sections.

@menu
* License::                     Terms of use (the GNU General Public License).
* Introduction::                Overview of the @sc{bos} package.

Indices:

* The Object System::           An overview of the object system.
* The Class Interface::         Functions for creating and peeping at classes.
* The Generic Function Interface::  Generic function manipulation functions.
* The Object Interface::        Functions for instantiating classes.
* Utility Functions::           Various other useful functions.
* Index::                       

 --- The Detailed Node Listing ---

Introduction

* Background::                  Thoughts and opinions on object systems.
* Portability::                 Requirements for @sc{bos} to run.
* Acknowledgements::            Thanks to the guilty parties.

The Class Interface

* Class Examples::              How to use the class interface.

The Generic Function Interface

* Specialisation Examples::     How to use the generics interface.

The Object Interface

* Object Examples::             How to use the object interface.
* The Initialise Method::       Initialising objects upon creation.
* Accessing Members::           How to access an object's members.

Object Examples

* The Initialise Method::       You must specialise this for every class.
* Accessing Members::           Looking inside an object.

The Initialise Method

* Using the Initialise Method::  Assigning value to members at creation time.

Accessing an Object's Members

* Unsafe Access::               Handy member access for the real world.
* Safe Access::                 Ideologically pure member access.

Unsafe Access

* Using Unsafe Access::         How to use the unsafe method access functions.

Safe Access

* Using Safe Access::           How to use the safe method access functions.
@end menu

@end ifinfo

@node License, Introduction, Top, Top
@unnumbered GNU GENERAL PUBLIC LICENSE
@center Version 2, June 1991

@display
Copyright @copyright{} 1989, 1991 Free Software Foundation, Inc.
675 Mass Ave, Cambridge, MA 02139, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@unnumberedsec Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software---to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

@iftex
@unnumberedsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end iftex
@ifinfo
@center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end ifinfo

@enumerate 0
@item
This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The ``Program'', below,
refers to any such program or work, and a ``work based on the Program''
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term ``modification''.)  Each licensee is addressed as ``you''.

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

@item
You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

@item
You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

@enumerate a
@item
You must cause the modified files to carry prominent notices
stating that you changed the files and the date of any change.

@item
You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any
part thereof, to be licensed as a whole at no charge to all third
parties under the terms of this License.

@item
If the modified program normally reads commands interactively
when run, you must cause it, when started running for such
interactive use in the most ordinary way, to print or display an
announcement including an appropriate copyright notice and a
notice that there is no warranty (or else, saying that you provide
a warranty) and that users may redistribute the program under
these conditions, and telling the user how to view a copy of this
License.  (Exception: if the Program itself is interactive but
does not normally print such an announcement, your work based on
the Program is not required to print an announcement.)
@end enumerate

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

@item
You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

@enumerate a
@item
Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software interchange; or,

@item
Accompany it with a written offer, valid for at least three
years, to give any third party, for a charge no more than your
cost of physically performing source distribution, a complete
machine-readable copy of the corresponding source code, to be
distributed under the terms of Sections 1 and 2 above on a medium
customarily used for software interchange; or,

@item
Accompany it with the information you received as to the offer
to distribute corresponding source code.  (This alternative is
allowed only for noncommercial distribution and only if you
received the program in object code or executable form with such
an offer, in accord with Subsection b above.)
@end enumerate

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

@item
You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

@item
Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

@item
If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and ``any
later version'', you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

@item
If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

@iftex
@heading NO WARRANTY
@end iftex
@ifinfo
@center NO WARRANTY
@end ifinfo

@item
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW@.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE@.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU@.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
@end enumerate

@iftex
@heading END OF TERMS AND CONDITIONS
@end iftex
@ifinfo
@center END OF TERMS AND CONDITIONS
@end ifinfo

@page
@unnumberedsec How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and an idea of what it does.}
Copyright (C) 19@var{yy}  @var{name of author}

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

@smallexample
Gnomovision version 69, Copyright (C) 19@var{yy} @var{name of author}
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
type `show w'.  This is free software, and you are welcome
to redistribute it under certain conditions; type `show c' 
for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than @samp{show w} and
@samp{show c}; they could even be mouse-clicks or menu items---whatever
suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a ``copyright disclaimer'' for the program, if
necessary.  Here is a sample; alter the names:

@smallexample
@group
Yoyodyne, Inc., hereby disclaims all copyright
interest in the program `Gnomovision'
(which makes passes at compilers) written 
by James Hacker.

@var{signature of Ty Coon}, 1 April 1989
Ty Coon, President of Vice
@end group
@end smallexample

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.

@node Introduction, The Object System, License, Top
@comment  node-name,  next,  previous,  up
@unnumbered Introduction

@cindex @r{inheritance, multiple}
@cindex @r{generic function}
Bryan's Object System, or @sc{bos}, is a very simple object system for
Scheme.  It is based on the use of @dfn{generic functions} and
@dfn{multiple inheritance}.  The interface provided by @sc{bos} looks
rather similar to those provided by other Lisp-based object systems,
such as Dylan, (Tiny) @sc{clos}, and @sc{Meroon}.

Rather than use any of those, I `rolled my own' object system because I
didn't want to be burdened down with a meta-object protocol for which I
would have little use.  As a result, though @sc{bos} isn't particularly
optimised, it is significantly faster than other Scheme object systems
which provide similar facilities.

@menu
* Background::                  Thoughts and opinions on object systems.
* Portability::                 Requirements for @sc{bos} to run.
* Acknowledgements::            Thanks to the guilty parties.
@end menu

@node Background, Portability, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Background

Here are a few sketchy thoughts upon which my object system
implementation are based.  Many of these are stolen from David Carlton,
though on some issues, he and I disagree.
@itemize @bullet
@item
  Objects should be opaque, disjoint from other types.  It's okay to
  have to add an extra type to a Scheme system to accomplish this,
  though I haven't gotten around to such a thing yet because most
  Schemes' type systems are hard to extend.
@item
  Objects shouldn't be a lot more inefficient than necessary.  It's
  okay to depend somewhat on support from the Scheme system to
  accomplish this.  For instance, generic function dispatch could
  probably be made faster using hash tables, but that might require
  the collaboration of the garbage collector to recompute hash values
  after things have moved around (though this should not cost much for
  a generational collector with sufficiently many generations).
@item
  We shouldn't @emph{depend} on macros: it is currently possible to do
  everything we need without them, and without imposing any more cost in
  usability than does, say, the R4RS record proposal.
@item
  The object system shouldn't conflict with any reasonably module
  system.
@item
  Object systems shouldn't try to do anything other than be object
  systems.  Scoping is the business of module systems, not object
  systems.
@item
  I prefer generic functions to having methods defined on each class;
  part of this is simply because I don't like typing the likes of
@lisp
  (method-call foo @dots{})
@end lisp
  when I can get away with typing
@lisp
  (foo bar @dots{})
@end lisp
  instead.  That apart, though, generic functions just make me feel more
  warm and cuddly inside than do per-object methods.  I've not seen any
  convincing arguments as to why one is better than the other.
@end itemize

@node Portability, Acknowledgements, Background, Introduction
@comment  node-name,  next,  previous,  up
@section Portability

@sc{bos} was originally written to run under Kelsey and Rees' Scheme 48
interpreter, but has been tested with Aubrey Jaffer's @sc{scm}, and
should run under any reasonably modern (i.e. R4RS-compliant) Scheme
system.  If your system supports R4RS hygienic macros and/or you use the
@sc{slib} programming library, all the better.

@node Acknowledgements,  , Portability, Introduction
@comment  node-name,  next,  previous,  up
@section Acknowledgements

I would like to thank Jim Blandy and David Carlton for many hours of
discussion on the topic of object systems.  We don't always see
eye-to-eye, but their input sharpened my understanding of the issues
involved.

@node The Object System, The Class Interface, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter The Object System

The @sc{bos} object system is a fairly traditional Lisp object system,
based on generic functions and anonymous classes.  Its syntax and
semantics are reasonably close to those of Dylan.

@cindex @r{class, anonymous}
@cindex @r{class object, anonymous}
@cindex @r{class}
By @dfn{anonymous class} we mean that there is no language-level
connection between the name of a class and the class.  At present, class
objects do not have names at all (this may change for debugging
purposes).  A @dfn{class object} is simply what is regarded as a
@dfn{class} in other object-oriented languages.

@cindex @r{generic function}
@cindex @r{generic function, specialising}
@cindex @r{method}
A @dfn{generic function} is one whose behaviour may be @dfn{specialised}
for a particular class.  A @dfn{method} of some class is a
specialisation of a generic function to that class.

@cindex @r{instance, general}
@cindex @r{instance, direct}
A @dfn{general instance} of a class is an object whose class is either
the given class, or a subclass of the given class.  A @dfn{direct
instance} of a class is an object whose class is exactly (according to
@code{eq?}) the given class.

@node The Class Interface, The Generic Function Interface, The Object System, Top
@comment  node-name,  next,  previous,  up
@chapter The Class Interface

@vindex class @r{class}
All classes you design @emph{must} inherit at some point from the root
class, @code{<class>}.

@findex define-class
@cindex @r{class object}
@lisp
@cartouche
(define-class class-name (subclasses @dots{}) (member-names @dots{}))
@end cartouche
@end lisp
The @code{define-class} special form creates a @dfn{class object} with
name @var{class-name}.  This class object has subclasses
@var{subclasses} (don't forget that your classes must inherit off
@code{<class>} at some point), and members specified by
@var{member-names}.

@cindex @r{inheritance, slot}
Members are accumulated in a class object by @dfn{slot inheritance};
that is, an instance of the class will have, in addition to its own
members, all the members of its subclasses.

@findex make-class
@cindex @r{class object, anonymous}
@lisp
@cartouche
(make-class (subclasses @dots{}) (member-names @dots{}))
  @result{} @i{class object}
@end cartouche
@end lisp
The @code{make-class} special form returns an @emph{anonymous} class
object; its parameters are the same as for @code{define-class}.

@findex class?
@lisp
@cartouche
(class? thing)
  @result{} @i{boolean}
@end cartouche
@end lisp
This form tests its @var{class} parameter, and returns @code{#t} if the
parameter is a class object.

@menu
* Class Examples::              How to use the class interface.
@end menu

@node Class Examples,  , The Class Interface, The Class Interface
@comment  node-name,  next,  previous,  up
@section Class Examples

@vindex point @r{class}
@vindex colour @r{class}
@vindex pixel @r{class}
@lisp
(define-class <point> (<class>) (x y))

(define-class <colour> (<class>) (red green blue))

(define-class <pixel> (<point> <colour>) ())

(class? <pixel>)
  @result{} @i{#t}
@end lisp


@node The Generic Function Interface, The Object Interface, The Class Interface, Top
@comment  node-name,  next,  previous,  up
@chapter The Generic Function Interface

@cindex @r{generic function}
@lisp
@cartouche
(define-generic generic-name)
@end cartouche
@end lisp
This form creates a generic function, with no specialisations.

@lisp
@cartouche
(make-generic)
  @result{} (lambda (object . arguments) @dots{})
@end cartouche
@end lisp
This form returns an unspecialised generic function.  When calling a
generic function, the first parameter to pass is the object on which to
operate, and the rest are arguments to the method specialised on that
object.

@cindex @r{generic function, specialising}
Before you can use a generic function, you must @dfn{specialise} it to
one or more classes, so that when called on an instance of a class to
which it is specialised, its behaviour will be defined.  This is done
using the @code{specialise!} form.

@findex specialise!
@lisp
@cartouche
(specialise! generic class
  (lambda (call-next-method self . other-args)
    @dots{}))
@end cartouche
@end lisp
Given a generic function, this specialises it to @var{class}.  That is,
whenever @var{generic} is called with an instance of @var{class} as its
second argument, @var{procedure} will be run.

@cindex @r{parameters, method}
Methods must take at least two parameters.  An example might be as
follows:
@lisp
(specialise! initialise <foo>
  (lambda (call-next-method self . other-args)
    (call-next-method)
    @dots{}))
@end lisp
@findex call-next-method
The first parameter, @var{call-next-method}, is a thunk which you
should call within the body of your function, preferably before you do
anything else.  The @var{self} parameter is `this' object.  Any other
parameters passed in the example above will be listed in
@var{other-args}.

@menu
* Specialisation Examples::     How to use the generics interface.
@end menu

@node Specialisation Examples,  , The Generic Function Interface, The Generic Function Interface
@comment  node-name,  next,  previous,  up
@section Specialisation Examples

@lisp
(define-generic move-horiz)

(specialise! move-horiz <3point>
  (lambda (call-next-method self delta)
    (write-object self)
    (newline)
    (call-next-method)
    (display "move-horiz to ")
    (write-object self)
    (newline)))
@end lisp


@node The Object Interface, Utility Functions, The Generic Function Interface, Top
@comment  node-name,  next,  previous,  up
@chapter The Object Interface

@findex define-object
@cindex @r{instantiation, object}
@cindex @r{parameters, instantiation}
@lisp
@cartouche
(define-object object-name class arguments @dots{})
@end cartouche
@end lisp
The @code{define-object} form creates a direct instance of @var{class},
passing @var{arguments} as parameters to the class' @code{initialise}
method.

@findex make-object
@cindex @r{instance, anonymous}
@lisp
@cartouche
(make-object class arguments @dots{})
  @result{} @i{direct instance}
@end cartouche
@end lisp
The @code{make-object} form returns an anonymous direct instance of
@var{class}, taking parameters as for @code{define-object}.

@findex object?
@lisp
@cartouche
(object? thing)
  @result{} @i{boolean}
@end cartouche
@end lisp
This form indicates whether or not its parameter is an object.

@findex is-a?
@lisp
@cartouche
(is-a? object class)
  @result{} @i{boolean}
@end cartouche
@end lisp
This function tests @var{object} according to the @emph{is-a} relation,
that is, to see if it is a general instance of @var{class}.

@menu
* Object Examples::             How to use the object interface.
* The Initialise Method::       Initialising objects upon creation.
* Accessing Members::           How to access an object's members.
@end menu

@node Object Examples, The Initialise Method, The Object Interface, The Object Interface
@comment  node-name,  next,  previous,  up
@section Object Examples

@vindex p @r{object}
@lisp
(define-object p <pixel> 'x 5 'y 5 'red 128 'blue 64)

(object? p)
  @result{} @i{#t}

(class? p)
  @result{} @i{#f}

(is-a? p <point>)
  @result{} @i{#t}
@end lisp

@menu
* The Initialise Method::       You must specialise this for every class.
* Accessing Members::           Looking inside an object.
@end menu

@node The Initialise Method, Accessing Members, Object Examples, The Object Interface
@comment  node-name,  next,  previous,  up
@section The Initialise Method

@findex initialise
@cindex @r{method, initialisation}
Every class that you create must specialise the @code{initialise}
method.  This method is called by both @code{define-object} and
@code{make-object}, and should @emph{never} be invoked directly.

@menu
* Using the Initialise Method::  Assigning value to members at creation time.
@end menu

@node Using the Initialise Method,  , The Initialise Method, The Initialise Method
@comment  node-name,  next,  previous,  up
@subsection Using the Initialise Method

@lisp
(specialise! initialise <point>
  (lambda (call-next-method self . args)
    (call-next-method)
    (slot-set! self 'x (get-arg args 'x))
    (slot-set! self 'y (get-arg args 'y))))

(specialise! initialise <colour>
  (lambda (call-next-method self . args)
    (call-next-method)
    (slot-set! self 'red (get-arg args 'red 0))
    (slot-set! self 'green (get-arg args 'green 0))
    (slot-set! self 'blue (get-arg args 'blue 0))))

(specialise! initialise <pixel>
  (lambda (call-next-method self . args)
    (call-next-method)))
@end lisp

@node Accessing Members,  , The Initialise Method, The Object Interface
@comment  node-name,  next,  previous,  up
@section Accessing an Object's Members

@cindex @r{slot}
@cindex @r{member}
A @dfn{member} of an object is one of the variables in that object, as
defined by the object's direct class.  Members should not be accessed
except through methods.  Note that the terms @dfn{slot} and
@emph{member} are interchangeable.

Two different methods of accessing and modifying an object's members are
provided by @sc{bos}.  The first is `unsafe'; that is, any function
which knows the name of one of an object's members can access or modify
that member directly.  I like to think that this sort of thing will
never happen in practice, which is why I provided these `unsafe'
entries.  I find them more convenient to use than the `safe' methods.

@menu
* Unsafe Access::               Handy member access for the real world.
* Safe Access::                 Ideologically pure member access.
@end menu

@node Unsafe Access, Safe Access, Accessing Members, Accessing Members
@comment  node-name,  next,  previous,  up
@subsection Unsafe Access

@findex slot-ref
@lisp
@cartouche
(slot-ref object slot-name)
  @result{} @i{value}
@end cartouche
@end lisp
This returns the value of @var{object}'s @var{slot-name} member.

@findex slot-set!
@lisp
@cartouche
(slot-set! object slot-name new-value)
@end cartouche
@end lisp
This sets @var{object}'s @var{slot-name} member to @var{new-value}.

@findex class-of
@lisp
@cartouche
(class-of object)
  @result{} @i{class object}
@end cartouche
@end lisp
This returns the class object of which @var{object} is a direct
instance.

@menu
* Using Unsafe Access::         How to use the unsafe method access functions.
@end menu

@node Using Unsafe Access,  , Unsafe Access, Unsafe Access
@comment  node-name,  next,  previous,  up
@subsubsection Using Unsafe Access

@vindex point-instance @r{object}
@lisp
(define-object point-instance 'x 1 'y 3)

(write-object point-instance)
  @print{} #@{Object <point>: (x: 1) (y: 3)@}

(slot-ref point-instance 'x)
  @result{} @i{1}

(slot-set! point-instance 'y 4)

(write-object point-instance)
  @print{} #@{Object <point>: (x: 1) (y: 4)@}

(write-class (class-of point-instance))
  @print{} #@{Class <point>: <class>, x y@}
@end lisp


@node Safe Access,  , Unsafe Access, Accessing Members
@comment  node-name,  next,  previous,  up
@subsection Safe Access

@findex member-accessor
@lisp
@cartouche
(member-accessor class slot-name)
  @result{} (lambda (object) @dots{})
       @result{} @i{value}
@end cartouche
@end lisp
This returns a function of one parameter which, when given an object of
type @var{class}, returns the value of its @var{slot-name} member.

@findex member-mutator
@lisp
@cartouche
(member-mutator class slot-name)
  @result{} (lambda (object new-value) @dots{})
@end cartouche
@end lisp
This returns a function of two arguments.  The first is as above, and
the second is the new value for the @var{slot-name} member to assume.

@menu
* Using Safe Access::           How to use the safe method access functions.
@end menu

@node Using Safe Access,  , Safe Access, Safe Access
@comment  node-name,  next,  previous,  up
@subsubsection Using Safe Access

@lisp
(define get-x (member-accessor <point> 'x))

(get-x point-instance)
  @result{} @i{1}

(define set-y! (member-mutator <point> 'y))

(set-y! point-instance 7)

(print-object point-instance)
  @print{} #@{Object <point>: (x: 1) (y: 7)@}
@end lisp


@node Utility Functions, Index, The Object Interface, Top
@comment  node-name,  next,  previous,  up
@chapter Utility Functions

@findex write-object
@lisp
@cartouche
(write-object object [output-port])
@end cartouche
@end lisp
This function writes @var{object} `nicely' to @var{output-port}, if
specified, otherwise to the default output port.  It prints the class of
the object, and the values of all of its members.

@findex write-class
@lisp
@cartouche
(write-class class [output-port])
@end cartouche
@end lisp
This function does much the same for @var{class}, printing all
subclasses of @var{class}, followed by its members' names.

@findex get-arg
@lisp
@cartouche
(get-arg arg-list arg-name [default])
  @result{} @i{value}
@end cartouche
@end lisp
This function returns the value of keyword argument @var{arg-name} in
@var{arg-list}, or if there is no associated value, returns
@var{default} if specified.

@cindex @r{parameters, keyword}
The behaviour of this function is intended to mimic Common Lisp's
keyword parameter facility.  It can be used, for example, in the
following manner:
@findex foo
@lisp
(define (foo . args)
  (display (get-arg args 'x 0))
  (newline)
  (display (get-arg args 'y))
  (newline))

(foo 'a 3 'x 2 'y 'a)
  @print{} 3
  @print{} a

(foo 'x 5)
  @print{} 5
  @result{} @i{error}
@end lisp

@lisp
(write-object p)
  @print{} #@{Object <pixel>: (x: 5) (y: 5) (red: 128) (green: 0) (blue: 64)@}

(write-class <pixel>)
  @print{} #@{Class <pixel>: <point> <class> <colour>, x y red green blue@}
@end lisp

@node Index,  , Utility Functions, Top
@comment  node-name,  next,  previous,  up
@unnumbered Index
@printindex fn

@summarycontents
@contents
@bye
