%!PS-Adobe-2.0 EPSF-2.0
%%Title: nopipeline.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Nov 15 14:25:22 2007
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
1.000 UL
LTb
900 600 M
63 0 V
5897 0 R
-63 0 V
stroke
780 600 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 10)]
] -66.7 MRshow
grestore
1.000 UL
LTb
900 1368 M
63 0 V
5897 0 R
-63 0 V
stroke
780 1368 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 20)]
] -66.7 MRshow
grestore
1.000 UL
LTb
900 2136 M
63 0 V
5897 0 R
-63 0 V
stroke
780 2136 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 30)]
] -66.7 MRshow
grestore
1.000 UL
LTb
900 2904 M
63 0 V
5897 0 R
-63 0 V
stroke
780 2904 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 40)]
] -66.7 MRshow
grestore
1.000 UL
LTb
900 3672 M
63 0 V
5897 0 R
-63 0 V
stroke
780 3672 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 50)]
] -66.7 MRshow
grestore
1.000 UL
LTb
900 4440 M
63 0 V
5897 0 R
-63 0 V
stroke
780 4440 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 60)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1086 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1086 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1831 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1831 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 2)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2576 600 M
0 63 V
0 3777 R
0 -63 V
stroke
2576 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 4)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3321 600 M
0 63 V
0 3777 R
0 -63 V
stroke
3321 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 6)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4066 600 M
0 63 V
0 3777 R
0 -63 V
stroke
4066 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 8)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4811 600 M
0 63 V
0 3777 R
0 -63 V
stroke
4811 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 10)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5556 600 M
0 63 V
0 3777 R
0 -63 V
stroke
5556 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 12)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6301 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6301 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 14)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
900 600 M
5960 0 V
0 3840 V
-5960 0 V
900 600 L
LTb
200 2520 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 200.0 0.0 true true 0 (Average Latency in ms)]
] -66.7 MCshow
grestore
grestore
LTb
3880 100 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Number of Worker CPUs)]
] -66.7 MCshow
grestore
LTb
3880 4740 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Average Latency with N worker threads)]
] -66.7 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
5957 1163 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (buildsplit)]
] -66.7 MRshow
grestore
LT0
6077 1163 M
543 0 V
-543 31 R
0 -62 V
543 62 R
0 -62 V
1086 2076 M
0 3 V
-31 -3 R
62 0 V
-62 3 R
62 0 V
342 389 R
0 10 V
-31 -10 R
62 0 V
-62 10 R
62 0 V
341 -833 R
0 146 V
-31 -146 R
62 0 V
-62 146 R
62 0 V
342 37 R
0 88 V
-31 -88 R
62 0 V
-62 88 R
62 0 V
341 -161 R
0 17 V
-31 -17 R
62 0 V
-62 17 R
62 0 V
342 -203 R
0 15 V
-31 -15 R
62 0 V
-62 15 R
62 0 V
341 -73 R
0 13 V
-31 -13 R
62 0 V
-62 13 R
62 0 V
342 -23 R
0 4 V
-31 -4 R
62 0 V
-62 4 R
62 0 V
341 38 R
0 3 V
-31 -3 R
62 0 V
-62 3 R
62 0 V
342 25 R
0 20 V
-31 -20 R
62 0 V
-62 20 R
62 0 V
341 26 R
0 3 V
-31 -3 R
62 0 V
-62 3 R
62 0 V
342 12 R
0 7 V
-31 -7 R
62 0 V
-62 7 R
62 0 V
341 60 R
0 8 V
-31 -8 R
62 0 V
-62 8 R
62 0 V
342 4 R
0 5 V
-31 -5 R
62 0 V
-62 5 R
62 0 V
341 -19 R
0 9 V
-31 -9 R
62 0 V
-62 9 R
62 0 V
342 -12 R
0 9 V
-31 -9 R
62 0 V
-62 9 R
62 0 V
1086 2077 Pls
1459 2473 Pls
1831 1718 Pls
2204 1872 Pls
2576 1763 Pls
2949 1576 Pls
3321 1517 Pls
3694 1503 Pls
4066 1545 Pls
4439 1581 Pls
4811 1619 Pls
5184 1635 Pls
5556 1703 Pls
5929 1714 Pls
6301 1701 Pls
6674 1699 Pls
6348 1163 Pls
1.000 UP
1.000 UL
LT1
LTb
5957 963 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (mapsplit)]
] -66.7 MRshow
grestore
LT1
6077 963 M
543 0 V
-543 31 R
0 -62 V
543 62 R
0 -62 V
1086 2119 M
0 13 V
-31 -13 R
62 0 V
-62 13 R
62 0 V
342 191 R
0 15 V
-31 -15 R
62 0 V
-62 15 R
62 0 V
341 1711 R
0 43 V
-31 -43 R
62 0 V
-62 43 R
62 0 V
342 -81 R
0 15 V
-31 -15 R
62 0 V
-62 15 R
62 0 V
341 13 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 -50 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 52 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 12 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 11 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 -23 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 167 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 -155 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 31 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 34 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 -50 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 54 R
-31 0 R
62 0 V
-62 0 R
62 0 V
1086 2125 Crs
1459 2330 Crs
1831 4071 Crs
2204 4019 Crs
2576 4039 Crs
2949 3989 Crs
3321 4041 Crs
3694 4053 Crs
4066 4064 Crs
4439 4041 Crs
4811 4208 Crs
5184 4053 Crs
5556 4084 Crs
5929 4118 Crs
6301 4068 Crs
6674 4122 Crs
6348 963 Crs
1.000 UP
1.000 UL
LT2
LTb
5957 763 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (fullsplit)]
] -66.7 MRshow
grestore
LT2
6077 763 M
543 0 V
-543 31 R
0 -62 V
543 62 R
0 -62 V
1086 2226 M
0 27 V
-31 -27 R
62 0 V
-62 27 R
62 0 V
342 103 R
0 29 V
-31 -29 R
62 0 V
-62 29 R
62 0 V
341 1596 R
0 40 V
-31 -40 R
62 0 V
-62 40 R
62 0 V
342 -112 R
0 30 V
-31 -30 R
62 0 V
-62 30 R
62 0 V
341 -8 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 58 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 -46 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 82 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 -14 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 36 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 -30 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 10 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 -23 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 -17 R
-31 0 R
62 0 V
-62 0 R
62 0 V
341 -1 R
-31 0 R
62 0 V
-62 0 R
62 0 V
342 -6 R
-31 0 R
62 0 V
-62 0 R
62 0 V
1086 2240 Star
1459 2370 Star
1831 4001 Star
2204 3924 Star
2576 3931 Star
2949 3989 Star
3321 3943 Star
3694 4025 Star
4066 4011 Star
4439 4047 Star
4811 4017 Star
5184 4027 Star
5556 4004 Star
5929 3987 Star
6301 3986 Star
6674 3980 Star
6348 763 Star
1.000 UL
LT0
1086 2077 M
373 396 V
372 -755 V
373 154 V
372 -109 V
373 -187 V
372 -59 V
373 -14 V
372 42 V
373 36 V
372 38 V
373 16 V
372 68 V
373 11 V
372 -13 V
373 -2 V
1.000 UL
LT1
1086 2125 M
373 205 V
372 1741 V
373 -52 V
372 20 V
373 -50 V
372 52 V
373 12 V
372 11 V
373 -23 V
372 167 V
373 -155 V
372 31 V
373 34 V
372 -50 V
373 54 V
1.000 UL
LT2
1086 2240 M
373 130 V
372 1631 V
373 -77 V
372 7 V
373 58 V
372 -46 V
373 82 V
372 -14 V
373 36 V
372 -30 V
373 10 V
372 -23 V
373 -17 V
372 -1 V
373 -6 V
1.000 UL
LTb
900 600 M
5960 0 V
0 3840 V
-5960 0 V
900 600 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
