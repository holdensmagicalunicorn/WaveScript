
  

[2008.05.19]

Sorting out all these redundant mfcc_*.ws files.

 mfcc1.ws:
   Initial version.  One big iterate, dynamic memory alloc.
     
 mfcc2_static.ws:
   First, I used statically allocated comm buffers instead of sigsegs.

 mfcc3_splitup.ws:
   Next, I split up the iterate into multiple operators.

 mfcc4_fixedpoint.ws:
   Moved the FFT over to fixedpoint.

 mfcc5_fixedpoint_full.ws:
   Added cepstrel coefficient.

 mfcc6_fixedpoint_fb.ws:
   Changed filterbank from floating to fixed.




[2008.05.21] {Instructions for building app}

There are several ways to build this application.  Different
configurations might have the code running entirely on the PC,
entirely on the embedded device (Telos or phone) or split between
them.

A basic compile runs it on the server.  The current prototype just
runs on empty data pushed by a timer, so it doesn't need sensor data
or a trace file.

  wsc2 mfcc6_fixedpoint_fb.ws
  ./query.exe

Also, it runs on the node:

  wstiny mfcc6_fixedpoint_fb.ws
  ./query.py
OR
  make -f Makefile.tos2 install telosb
  
The next step is to compile the application split across the two platforms.

  wstiny -split mfcc6_fixedpoint_fb.ws




[2008.09.18]

Well, it looks like mfcc6 is producing -inf's right now.  Mfcc5 is
producing something at least.


[2008.10.08] {Hacking log}

Well, I've had enormous difficulty getting repeatible consistent
behavior out of tinyos nodes.  I'm padding my array messages more than
I should have to.  And I could only get 106 byte message payloads
through the *serial* port.  (Perhaps it's 128 hard limit including all
the AM/CTP overheads?)  If the message size gets too big I also get
compile errors like the following:


`___VIRTQUEUE____181'
WSQuery.nc: In function `WSQuery$Node_stripped_12_task$runTask':
WSQuery.nc:280: warning: unused variable `___VIRTQUEUE____193'
WSQuery.nc: In function `WSQuery$Node_wid_13_task$runTask':
WSQuery.nc:252: warning: unused variable `___VIRTQUEUE____196'
/opt/tinyos-2.x/tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc: In function `WSQuery$Node_emg_10_task$runTask':
WSQuery.nc:550: warning: `tmpsmp_1251' might be used uninitialized in this function
msp430-ld: address 0x3afa of build/telosb/main.exe section .bss is not within region data
make: *** [exe0] Error 1
RUNNING pc-side listener... 6

Currently, even without padding, just returning count,dropped, I can't
get anything back with a normal wstiny past cut 4.  If I try -split
then I still don't get anything back.  Darn, when did these cutpoints
work?  

Actually... as is usually the case with me & tinyos.. things seem to
fluctuate between various degrees of broken-ness.  

Ah, wait, my most recent runs were broken because of silentroot not
being set right.  Things are a bit more sane now.

In printf mode I can run cutpoint 6 and it behaves correctly.  I'm
having problems with -split even without using a two-node network.  It
works at cutpoint 3.  It works at 4.  It even works at 5.  Hmm, even
6!?!  Hmm... but those lights are looking different than when I
manually return the ceps_stream...  Hmm... without -tree turned on I
don't think there should be any LED pollution by the subsystems...

HMM.. it looks like it's not cutting in the right place!!  CUT=6 is
still just doing logs, not ceps.  Ok, having fixed that off-by-one
error, they look the same.  Now with two nodes... ok... this might be
working.  8116 RAM currently for cut 6.

Ack... my problem right now is that cutpoint 5 isn't working!!  Looks
like it ran into a wserror from the blink-code.  Wish I could figure
out which one ;).  So odd, because cutpoint works for the single node.
Yep, it works on one node now without -tree.  What about on a single
node *with* -tree?  That works too.  Then with two nodes...  It goes
to wserror immediately.  That is, the worker node goes to wserror as
soon as its programmed.

Could be that it gets CTP messages incorrectly... or it could be that
the getparent fails because the tree hasn't formed yet.  Let's make
that silently fail.  Ok, it was the getParent problem.  Now it's working.

Man, in addition to time-out errors, it just apparently hung while
trying to do bsl.  Flaky flaky.

Presently... There's no wserror... but I'm getting nothing over the
radio from cut 4 or cut 5.

For some crazy reason piping the results of the query to a file causes
me to lose them (not flushing? and then I kill the process before it
ever flushes?).  I'm actually cut and pasting the results for now.

Continuing... just got a wserror on cut 4 on the worker node (rather
than the root).  Oh, ok that's probably because of a non-updated chez
build of the compiler.  I removed the getTreeParent error.  Now I've
got cut 4 working split, with a silent root.  What did I do
differently?  Nothing.  I just programmed them one at a time manually.
Now I'll try with 'progtelos all'.  Works fine.  Ok, are they just
getting "hot" or something?

Hmm... also, just tried again with cut 4.  It took a strangely long
time for the root to kick in and start receiving.  Just the vagaries
of CTP I guess.  Now it even worked with 'progtelos all' programming
them simultaneously.

Ok, just did a full run of the run_all_cuts.sh script.  Note that the
dropped counts are still broken.  At lter cutpoints they're way
undercounted.

--

Now on to the padded version.  First with one-node w/ -tree.  Trying
cut 5.  Gets a wserror.  Ok, backing off.  Trying wsc2.  The output of
that looks fine at various cutpoints.  Going to a small max message
size, and adding a bunch of extra headroom in the message payload.
Ok, that works.

If I keep the "headroom" (stupid extra space) at 10, then bumping the
message size to 100 is ok (this is at cut 1 currently), still just one
node.  Ok, 106 works too.

Trying with two nodes, silentroot or not.  No luck.  I get wserror on
the worker currently.  Tuning message size down (28).  That works.
Message size limit for the radio must be even smaller.  Trying 60.
Wserror on the worker.  50?  wserror.  40?  No!  30?!?  NO!  Is the
radio message size not getting set properly?  May be a problem with
progtelos...

Now, with the non-padded version I used larger message sizes... but I
wasn't really writing anything into them.  

Yep, progtelos was the problem.  Fixed it.  Still no luck with size
30!!  28 still works.  Reducing the overhead to 6 gives me wserrors on
the worker.  8 doesn't work either.

Oh jeez... ok I just ran with message size 106 by ACCIDENT when
calling my run_all_cuts script.  And at least for the first three
cuts... it WORKS!  That's insane.  And the lights don't lie.. it's
running on two nodes, silent root.  And this is using progtelos all.
Should be the same... but were there further subtle progtelos
problems?  Or is this raw unadulterated nondeterminism?

Ok... now it's all the way to cut_6... looking good. Cut 6 has shorter
messages (68 rather than 106).



