

(define tests_noclosure
  '( '()
     75
     (- 2 4)
     (* -6 7)
     (cons 0 '())
     (cons (cons 0 '()) (cons 1 '()))
     (cdr (cons 16 32))
     ;; Cannot have toplevel void!!
     ;(void)
;     (eq? (void) (void))
;     (eq? (void) (if #f 3))
     (letrec ((x 0)) x)
     (letrec ([x 0]) x x)
     (letrec ([x 17]) (+ x x))
     (letrec ([q (add1 (add1 2))]) q)
     (+ 20 (if #t 122))
     (letrec ((x 16)
           (y 128))
       (* x y))
     (if #t
         (+ 20
            (if #t 122))
         10000)
     (letrec ([x 3])
       (letrec ([y (+ x (quote 4))])
         (+ x y)))
     (letrec ((x '(#(1 2 (3 #(4))) #() 3 #t))) x)
     (not (if #f #t (not #f)))
     (letrec ([x 0][y 4000]) x)
     (letrec ((x (cons 16 32))) (pair? x))
     (begin (if #f 7) 3)
     (begin (if (zero? 4) 7) 3)
     (letrec ([x 0]) (begin (if (zero? x) 7) x))
     (letrec ([x 0]) (begin (if (zero? x) (begin x 7)) x))
     (letrec ([x 0] [z 9000])
       (begin (if (zero? x) (begin x 7)) z))
     (letrec ([x 0] [z 9000])
       (begin (if (zero? x) (begin (set! x x) 7))
              (+ x z)))
     (letrec ([x 4]) (begin (+ (begin (set! x 17) 3) 4) x))
     (letrec ([x (cons 0 '())])
       (begin (if x (set-car! x (car x))) x))
     (letrec ([x (cons 0 '())])
       (begin (if x (set-car! x (+ (car x) (car x)))) x))
     (letrec ([x (cons 0 '())])
       (if (zero? (car x)) (begin (set-car! x x) 7) x))
     (letrec ([x (cons 0 '())])
       (letrec ([q x]) (if (zero? (car x)) (begin (set-car! q x) 7) x)))
     (letrec ([x 0]) (if (zero? x) (begin (set! x (+ x 5000)) x) 20))
     (letrec ([y 0]) (begin (if #t (set! y y)) y))
     (begin (if #t #t #t) #f)
     (begin (if (if #t #t #f) (if #t #t #f) (if #t #t #f)) #f)
     (letrec
       ([x 0]
        [y 4000]
        [z 9000])
       (letrec ((q (+ x z)))
         (begin
           (if (zero? x) (begin (set! q (+ x x)) 7))
           (+ y y)
           (+ x z))))
     (letrec ([x (letrec ([y 2]) y)]
           [y 5])
       (add1 x))
     (letrec ([y 4000]) (+ y y))
     ((lambda (y) y) 4000)
     ;---------------------------
     ;(letrec ([a 0])(letrec ([a (set! a 0)][b 11]) a))
     (letrec ([a 0])(letrec ([a (set! a 0)][b 11]) (eq? a (void))))
     (letrec ([a 5]) (letrec ([a 0] [b (set! a (+ a 11))]) a))
     
     (letrec ([a 0]) (letrec ([b (set! a 0)]) a))
     ;(letrec ([a 0])(letrec ([a (set! a 0)]) (letrec ([b 11]) a)))
     (letrec ([a 0])(letrec ([a (set! a 0)]) (letrec ([b 11]) (eq? a (void)))))
     (letrec ([a 0])(letrec ([a 0]) (letrec ([b (set! a 11)]) a)))
     ;(letrec ([a 0])(letrec ([a 0]) (letrec ([b 11]) (set! a 11))))
     (letrec ([a 0])(letrec ([a 0]) (letrec ([b 11]) (eq? (void) (set! a 11)))))
     
     (letrec ([x (letrec ([y 2])
                y)])
       x)
     (letrec ([x (if #t (letrec ([y 2])
                       y)
                  1)])
       x)
     (letrec ([x (letrec ([y (letrec ([z 3])
                         z)])
                y)])
       x)
     (letrec ([x (if #t (letrec ([y (if #t (letrec ([z 3])
                                       z)
                                  2)])
                       y)
                  1)])
       x)
     (+ (letrec ([x 3])
          (add1 x))
        4)
     (+ (letrec ([x 3][y 4])
          (* x y))
        4)
     (letrec ([x (add1 (letrec ([y 4]) y))]) x)
     (letrec ([x (+ (letrec ([y 4]) y)  (letrec ([y 4]) y))]) (add1 x))
     (letrec ([z 0])
       (letrec ([x z])
         z
         x))
     (letrec ([z 0])
       (letrec ([x (begin (letrec ([y 2]) (set! z y)) z)])
         x))
     (letrec ([x (begin (letrec ([y 2]) (set! y y)) (letrec ([z 3]) z))])
       x)
     
     (letrec ((x 3000))
       (if (fixnum? x)
           (letrec ((y (cons x '())))
             (if (if (pair? y) (null? (cdr y)) #f)
                 (+ x 5000)
                 (- x 3000)))))
     (letrec ((x (cons 1000 2000)))
       (if (pair? x)
           (letrec ((temp (car x)))
             (set-car! x (cdr x))
             (set-cdr! x temp)
             (+ (car x) (cdr x)))
           10000000))
     
     ; nested test examples
     (+ (letrec ((x 7) (y 2)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     (+ (letrec ((x 7) (y -22)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     (+ (letrec ((x 8) (y 2)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     (+ (letrec ((x 8) (y -22)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     
     (let ((v (make-vector 5))
           (w (make-vector 7)))
       (vector-set! v 0 #t)
       (vector-set! w 3 #t)
       (if (boolean? (vector-ref v 0))
           (vector-ref w 3)
           #f))
     (let ((a 5) (b 4))
       (if (< b 3)
           (eq? a (+ b 1))
           (if (<= b 3)
               (eq? (- a 1) b)
               (= a (+ b 2)))))
     (let ((a 5) (b 4))
       (if #f
           (eq? a (+ b 1))
           (if #f
               (eq? (- a 1) b)
               (= a (+ b 2)))))
     
     (let ([x (cons #f #t)] [y 17])
       (if (if (car x) #t (< y 20))
           (* y (* y 2))
           (void)))
     ))