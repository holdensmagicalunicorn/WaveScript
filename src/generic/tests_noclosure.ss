

(define tests_noclosure
  '( '()
     75
     (- 2 4)
     (* -6 7)
     (cons 0 '())
     (cons (cons 0 '()) (cons 1 '()))
     (cdr (cons 16 32))
     ;; Cannot have toplevel void!!
     (letrec ((x 0)) x)
     (letrec ([x 17]) (+ x x))
     (letrec ([q (+ 1 (+ 1 2))]) q)
     (+ 20 (if #t 122 23))
     (letrec ((x 16)
	      (y 128))
       (* x y))
     (if #t
         (+ 20
            (if #t 122 23))
         10000)
     (letrec ([x 3])
       (letrec ([y (+ x (quote 4))])
         (+ x y)))
     (not (if #f #t (not #f)))
     (letrec ([x 0][y 4000]) x)
     (letrec ((x (cons 16 32))) (pair? x))

     (if (if #t #t #f) (if #t #t #f) (if #t #t #f))
     (letrec
       ([x 0]
        [y 4000]
        [z 9000])
       (letrec ((q (+ x z)))
           (+ x z)))
     (letrec ([x (letrec ([y 2]) y)]
	      [y 5])
       (+ 1 x))
     (letrec ([y 4000]) (+ y y))     
     (letrec ([x (letrec ([y 2])
                y)])
       x)
     (letrec ([x (if #t (letrec ([y 2])
                       y)
                  1)])
       x)
     (letrec ([x (letrec ([y (letrec ([z 3])
                         z)])
                y)])
       x)
     (letrec ([x (if #t (letrec ([y (if #t (letrec ([z 3])
                                       z)
                                  2)])
                       y)
                  1)])
       x)
     (+ (letrec ([x 3])
          (+ 1 x))
        4)
     (+ (letrec ([x 3][y 4])
          (* x y))
        4)
     (letrec ([x (+ 1 (letrec ([y 4]) y))]) x)
     (letrec ([x (+ (letrec ([y 4]) y)  (letrec ([y 4]) y))]) (+ 1 x))
     (letrec ([z 0])
       (letrec ([x z])
         x))     

     (letrec ((x 3000))
       (if (number? x)
           (letrec ((y (cons x '())))
             (if (if (pair? y) (null? (cdr y)) #f)
                 (+ x 5000)
                 (- x 3000)))
	   0))
     
     ; nested test examples
     (+ (letrec ((x 7) (y 2)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     (+ (letrec ((x 7) (y -22)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     (+ (letrec ((x 8) (y 2)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     (+ (letrec ((x 8) (y -22)) (if (if (= x 7) (< y 0) (<= 0 y)) 77 88)) 99)
     
     (letrec ((a 5) (b 4))
       (if (< b 3)
           (eq? a (+ b 1))
           (if (<= b 3)
               (eq? (- a 1) b)
               (= a (+ b 2)))))
     (letrec ((a 5) (b 4))
       (if #f
           (eq? a (+ b 1))
           (if #f
               (eq? (- a 1) b)
               (= a (+ b 2)))))
     
     (letrec ([x (cons #f #t)] [y 17])
       (if (if (car x) #t (< y 20))
           (* y (* y 2))
           0))
     ))