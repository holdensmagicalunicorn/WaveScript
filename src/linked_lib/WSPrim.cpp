
// This defines the WaveScript primitives that the code generated by
// the WaveScript compiler depends upon.
 class WSPrim {

   public:
//   static SigSeg<complex> fft(SigSeg<float> input) {
//       /* Currently we just use the unitless timebase: */ 
//       Timebase _freq = Unitless;
//       SigSeg<float>* casted = &input;
      
//       /* alloc buffer for FFT */
//       Signal<complex> s = Signal<complex>(_freq);
//       complex *fft_buf = s.getBuffer(casted->length()/2);
//       float *fft_flt = (float *)fft_buf;

//       /* copy input over to output buffer */
//       float *cbuf = casted->getDirect();
//       memmove(fft_flt, cbuf, sizeof(float)*casted->length());
//       casted->release(cbuf);
      
//       /* do the fft */
//       FFT::realft(fft_flt-1, casted->length(), +1);

//       /* return the sigseg */
//       SigSeg<complex> output = s.commit(casted->length()/2);
//       delete casted;
//       return(output);
//   }


   // Hmm should use STL strings... UNFINISHED
   char* stringappend(char* A, char* B) {
     return A;
   }

/*

joinsegs 
subseg

*/

};
