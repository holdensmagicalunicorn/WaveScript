#!/bin/bash

#TMP=/tmp/`whoami`/wavescript_parsed.tmp

source `dirname $0`/assert_regimentd

FLAGS=' -verbose 1 '
CLINK=' -L/usr/arm-linux/lib -L/usr/lib/mlton/arm-linux -lmlton -lgdtoa -lm -lgmp -lfftw3f '
CINCLUDES="$REGIMENTD/src/generic/passes/mlton_bkend/fftw.c"
OUTPUT=query.arm.mlton.exe

if [ ! -f "$1" ];
then echo Usage: "wsmlton-arm <file> <options ...>";
     echo 
     echo   File \"$1\" does not exist.
     exit 1;
fi

if [ ! -d /tmp/`whoami` ]; 
then mkdir /tmp/`whoami`;
fi

D=`dirname "$1"`
B=`basename "$1"`
abspath="`cd \"$D\" 2>/dev/null && pwd || echo \"$D\"`/$B"

# Clean up first:
rm -f "query.sml"
rm -f "$OUTPUT"

export REGIMENT_OR_WAVESCRIPT=WS
if regiment wsml $abspath ${1+"$@"} ;
then echo
else #rm -f $TMP; 
    echo Compilation aborted: \"regiment wscomp\" exited with error code.
    exit 1;
fi

################################################################################

# Clean up first:
rm -f "query.*.c"
rm -f ".tmp.*.o"

echo MLton cross compile to ARM.  Setting up environment.
export PATH=$PATH:/usr/arm-linux/bin
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/arm-linux/lib

echo mlton -default-ann 'allowFFI true' -codegen c -verbose 1 -stop g $FLAGS $INCLUDES query.sml $CINCLUDES
mlton -default-ann 'allowFFI true' -codegen c -verbose 1 -stop g $FLAGS $INCLUDES query.sml $CINCLUDES

# RRN:
# HACKING these calls to gcc in here directly.
# The reason for this is that the machines I'm working on (breeze, patridge)
# don't support "gcc -b" for some reason.

echo Beginning GCC cross compile.
start=`date +%s`

FILES=`ls query.*.c`
OBJS=''

#echo FILES $FILES
for fn in $FILES $CINCLUDES
do 
  echo "  Compiling $fn"
  OBJ=".tmp.`basename $fn`.o"
  OBJS="$OBJS $OBJ"
  arm-linux-gcc -I/usr/arm-linux/include -std=gnu99 -c -I/usr/lib/mlton/arm-linux/include \
          -I/usr/lib/mlton/include -O1 -fno-strict-aliasing \
          -fomit-frame-pointer -w -o $OBJ $fn
done

echo Now Linking: $OBJS
if (arm-linux-gcc -o $OUTPUT $OBJS $CLINK )
then end=`date +%s`;
     echo "  Time spent in gcc compiler: "$[($end) - ($start)]" second(s)";
     echo "Executable output to $OUTPUT.";
else echo "gcc returned error!!"; exit -1
fi

