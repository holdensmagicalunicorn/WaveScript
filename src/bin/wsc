#!/bin/bash

# TODO: ACCEPTING -o ARGUMENT BUT IT'S NOT USED CURRENTLY.

#TMP=/tmp/`whoami`/wavescript_parsed.tmp

TMP=`dirname $0`
if [ -f "$TMP/assert_regimentd" ]; 
then source "$TMP/assert_regimentd"; fi

CCPASSTHRU=""
REGPASSTHRU=""
FILE=""
OUTFILE=query.cpp
NOGCC=0
WSCDEBUG=0

# This is lame, but have to pass through a bunch of stuff from the script to the scheme process.
while [ $# != 0 ];  do 
  if [ "$1" == "-no-gcc" ] || 
     [ "$1" == "-nogcc" ]
  then NOGCC=1;
  elif [ "$1" == "-dbg" ]
  then WSCDEBUG=1;
  elif [ "$1" == "-nothreads" ]
#  then CCPASSTHRU="$CCPASSTHRU -DBOOST_SP_DISABLE_THREADS"
  then CCPASSTHRU="$CCPASSTHRU -nothreads"
  elif [ "$1" == "-o" ]
  then shift;
       OUTFILE="$1"; 
  elif [ "$1" == "-opt" ]
  then REGPASSTHRU="$REGPASSTHRU $1 $2"; shift
  elif [ "$1" == "-exit-error" ] ||
       [ "$1" == "-split" ] ||
       [ "$1" == "-dot" ] ||
       [ "$1" == "-t" ]
  then REGPASSTHRU="$REGPASSTHRU $1";

  elif [ "$1" == "--disable-pass" ] || 
       [ "$1" == "-v" ] 
  then REGPASSTHRU="$REGPASSTHRU $1"; # FIXME: this is dangerous on bad args!
       shift;
       REGPASSTHRU="$REGPASSTHRU $1";
  elif [ "$1" == "--scheduler" ]
  then REGPASSTHRU="$REGPASSTHRU $1";
       shift;
       CCPASSTHRU="$CCPASSTHRU --scheduler $1";
       REGPASSTHRU="$REGPASSTHRU $1";
  elif [ "$1" == "--param-file" ]
  then REGPASSTHRU="$REGPASSTHRU $1";
       shift;
       REGPASSTHRU="$REGPASSTHRU $1";
  elif [ "$1" == "-O0" ] || 
       [ "$1" == "-O1" ] || 
       [ "$1" == "-O2" ] || 
       [ "$1" == "-O3" ];
  then COPTFLAG="$1"; 
#  elif [ `echo $1 | sed` == "-" ]
#  then echo "Unknown flag: $1"
  else FILE="$1"; 
  fi
  shift;
done;

# ,O0,O1,O2,O3
#REGPASSTHRU=`getopt -l "disable-pass:,scheduler:,param-file:,opt:,exit-error,split,dot" -o ":v:t" -- "$@"`
#CCPASSTHRU=`getopt -l "" -o ":" -- "$@"`

if [ ! -f "$FILE" ];
then echo Usage: "wsc <file> <options ...>";
#     echo   (Options: -b  Build cpp file.)
     echo 
     echo   File \"$FILE\" does not exist.
     exit 1;
fi

if [ ! -d /tmp/`whoami` ]; 
then mkdir /tmp/`whoami`; 
fi


D=`dirname "$FILE"`
B=`basename "$FILE"`
abspath="`cd \"$D\" 2>/dev/null && pwd || echo \"$D\"`/$B"

# Clean first:
rm -f "$OUTFILE"

if [ "$REGIMENTEXEC" == "" ]; then REGIMENTEXEC=regiment; fi

#echo PASSING THROUGH ARGS: $REGPASSTHRU

if [ "$REGFLAG" == "" ]; then REGFLAG=wscomp; fi
export REGIMENT_OR_WAVESCRIPT=WS

echo "$REGIMENTEXEC" $REGFLAG $abspath $REGPASSTHRU ;

if "$REGIMENTEXEC" $REGFLAG $abspath $REGPASSTHRU ;
then echo
else #rm -f $TMP; 
    echo Compilation aborted: \"regiment wscomp\" exited with error code.
    exit 1;
fi
#rm -f $TMP

# If this flag is set, we stop here.
# HACK: accepts the argument only in this position:
#if test "$2" == "-c0" ; 
#then exit 0
#fi

#echo
#echo
#(cd $WAVESCOPED; make WaveScriptQuery)
#echo Writing scipt \"run_query\".  Use it to invoke the compiled query.
#echo '#!/bin/bash' > run_query
##echo '(cd $WAVESCOPED; ./run_WaveScriptQuery)' >> run_query
#echo '$WAVESCOPED/run_WaveScriptQuery $*' >> run_query
#chmod +x run_query

if [ "$WSARCH" == "ensbox" ];
then CCOMPILE='wsc-arm-g++'
     export WSEXESUFFIX="arm.exe"
else CCOMPILE='wsc-g++'
fi


export WSCDEBUG

export COPTFLAG
if ! [ "$NOGCC" == "0" ]
then exit 0
elif $CCOMPILE $CCPASSTHRU ./query 
then 
  if [ ! -d "$WAVESCOPED" ]; 
  then echo WAVESCOPED directory, \"$WAVESCOPED\", does not exist.  Can\'t execute query.; 
       exit 1;
  fi
  echo
  echo "Executable output to query.$WSEXESUFFIX"
else echo "C compilation failed"; exit -1;
fi;
