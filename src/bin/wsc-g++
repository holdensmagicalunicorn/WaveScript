#!/bin/bash


# Dynamic linking to WaveScope engine by default? -- 1 or 0 
DYNAMICLINK=0
CCARGS=""
FILE=""


# In the future, consider these optimize flags:
# -falign-functions=n  -falign-jumps=n -falign-labels=n  -falign-loops=n -fbranch-probabilities  -fcaller-saves
# -fcprop-registers -fcse-follow-jumps  -fcse-skip-blocks  -fdata-sections -fdelayed-branch  -fdelete-null-pointer-checks
# -fexpensive-optimizations  -ffast-math  -ffloat-store -fforce-addr  -fforce-mem  -ffunction-sections -fgcse  -fgcse-lm
# -fgcse-sm  -floop-optimize  -fcrossjumping -fif-conversion  -fif-conversion2 -finline-functions  -finline-limit=n
# -fkeep-inline-functions -fkeep-static-consts  -fmerge-constants  -fmerge-all-constants -fmove-all-movables  -fnew-ra
# -fno-branch-count-reg -fno-default-inline  -fno-defer-pop -fno-function-cse  -fno-guess-branch-probability -fno-inline
# -fno-math-errno  -fno-peephole  -fno-peephole2 -funsafe-math-optimizations  -ffinite-math-only -fno-trapping-math
# -fno-zero-initialized-in-bss -fomit-frame-pointer  -foptimize-register-move -foptimize-sibling-calls
# -fprefetch-loop-arrays -freduce-all-givs  -fregmove  -frename-registers -freorder-blocks  -freorder-functions -fre-
# run-cse-after-loop  -frerun-loop-opt -fschedule-insns  -fschedule-insns2 -fno-sched-interblock  -fno-sched-spec
# -fsched-spec-load -fsched-spec-load-dangerous  -fsignaling-nans -fsingle-precision-constant  -fssa  -fssa-ccp
# -fssa-dce -fstrength-reduce  -fstrict-aliasing  -ftracer  -fthread-jumps -funroll-all-loops  -funroll-loops --param


while [ $# != 0 ];  do 
  if [ "$1" == "-dynamic" ];
  then DYNAMICLINK=1; 
  elif [ "$1" == "-static" ];
  then DYNAMICLINK=0;
  elif [ "$1" == "-O2" ] || [ "$1" == "-O3" ] ||
       [ "$1" == "-pg" ] || [ "$1" == "-g" ] ;
  then CCARGS="$CCARGS $1"; 


#  elif [ `echo $1 | sed` == "-" ]
#  then echo "Unknown flag: $1"
  else FILE="$1"; 
  fi
  shift;
done;


# Now pull extra libraries to link from the first line of the file:
FIRST=`head -n1 "$FILE.cpp"`

MATCH=`echo $FIRST | grep "^//WSLIBDEPS:"`

# -fPIC | -O1/2/3 | -g
#WS_FLAGS="-fPIC -pg $CCARGS"
WS_FLAGS=" $CCARGS"

WS_WARNINGS="-Wall -Werror -Wno-unused-variable -Wno-unused-function"
WS_INCLUDES="-I$WAVESCOPED/include "
WS_MACROS="-DSegList -DuseArray "
#WS_LINK="-lfftw3f -lm -lgsl -lgslcblas -lpthread "
WS_LINK=" -lpthread "


if [ "$MATCH" != "" ];
then 
   EXTRALIBS=`echo $FIRST | sed "s/\/\/WSLIBDEPS://"`
   WS_LINK="$WS_LINK $EXTRALIBS"
   echo Linking extra libraries requested by query file: $EXTRALIBS
fi



if [ "$WSARCH" == "ensbox" ];
then THELIB=libws-SMSegList_ENSBOX
else THELIB=libws-SMSegList
fi

if [ $DYNAMICLINK == "1" ];
then WS_LINK="$WS_LINK $WAVESCOPED/$THELIB.so";
else WS_LINK="$WS_LINK $WAVESCOPED/$THELIB.a";
fi

WS_ALLARGS=" $WS_FLAGS $WS_WARNINGS $WS_INCLUDES $WS_MACROS "

#echo link: $WS_LINK

echo Compiling .cpp file using g++.

#echo g++ $WS_ALLARGS -o "$FILE.exe" "$FILE.cpp" $WS_LINK;


if [ "$WSGPLUSPLUS" == "" ];
then WSGPLUSPLUS="g++ "
     export WSEXESUFFIX="exe"
fi

echo $WSGPLUSPLUS $WS_ALLARGS -o "$FILE"."$WSEXESUFFIX" "$FILE.cpp" $WS_LINK;

start=`date +%s`
if $WSGPLUSPLUS $WS_ALLARGS -o "$FILE"."$WSEXESUFFIX" "$FILE.cpp" $WS_LINK;
then 
    end=`date +%s`
    echo "Time spent in g++: "$[($end) - ($start)]" seconds"
else
    echo
    echo g++ had errors, aborting.
    exit 1;
fi;

#elapsed=$[$start - $end]

